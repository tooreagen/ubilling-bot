const { Scenes, Markup } = require("telegraf");
const { checkLogin, checkPassword } = require("../controllers/authentification");
const { connectionUbilling } = require("../db");

//–°—Ü–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
const authWizard = new Scenes.WizardScene(
  "authentication",
  //step 1 –≤–≤–µ–¥–µ–Ω–Ω—è –ª–æ–≥—ñ–Ω—É
  (ctx) => {
    ctx.reply(
      "üëá –í–≤–µ–¥—ñ—Ç—å –ª–æ–≥—ñ–Ω:",
      Markup.inlineKeyboard([Markup.button.callback("üö´ –í—ñ–¥–º—ñ–Ω–∞", "cancel")])
    );

    return ctx.wizard.next();
  },

  //step 2 –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª–æ–≥—ñ–Ω–∞, –≤–≤–µ–¥–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—é
  async (ctx) => {
    //—è–∫—â–æ –ø–µ—Ä–µ–¥ —Ü–∏–º –≤–≤–µ–ª–∏ –≤—ñ–¥–º—ñ–Ω–∞ —Ç–æ –∑–∞–≤–µ—Ä—à—É—î–º–æ —Å—Ü–µ–Ω—É
    if (ctx.callbackQuery && ctx.callbackQuery.data === "cancel") {
      ctx.reply("–û–ø–µ—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞");
      return ctx.scene.leave();
    }

    //–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –ª–æ–≥—ñ–Ω–∞
    if ((await checkLogin(ctx.message.text)) === true) {
      //—Å–±–µ—Ä—ñ–≥–∞—î–º–æ –ª–æ–≥—ñ–Ω —É —Å–µ—Å—ñ—é
      ctx.session.login = ctx.message.text;

      ctx.reply(
        `üëá –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à –ø–∞—Ä–æ–ª—å:`,
        Markup.inlineKeyboard([Markup.button.callback("üö´ –í—ñ–¥–º—ñ–Ω–∞", "cancel")])
      );
      return ctx.wizard.next();
    } else {
      ctx.reply(
        "‚ùóÔ∏è –õ–æ–≥—ñ–Ω –Ω–µ–≤—ñ—Ä–Ω–∏–π. \n\n üëá –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ:",
        Markup.inlineKeyboard([Markup.button.callback("üö´ –í—ñ–¥–º—ñ–Ω–∞", "cancel")])
      );
    }
  },

  //step 3 –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞—Ä–æ–ª—é, –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å–µ—Å—ñ—ó,
  //       –Ω–∞–¥–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É –≤ –±–æ—Ç, –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –≤ –ë–î
  async (ctx) => {
    //—è–∫—â–æ –ø–µ—Ä–µ–¥ —Ü–∏–º –≤–≤–µ–ª–∏ –≤—ñ–¥–º—ñ–Ω–∞ —Ç–æ –∑–∞–≤–µ—Ä—à—É—î–º–æ —Å—Ü–µ–Ω—É
    if (ctx.callbackQuery && ctx.callbackQuery.data === "cancel") {
      ctx.reply("–û–ø–µ—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞");
      return ctx.scene.leave();
    }

    //–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—ñ –ø–∞—Ä–æ–ª—è
    if ((await checkPassword(ctx.session.login, ctx.message.text)) === true) {
      ctx.reply(`–î—è–∫—É—é! –í–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ.`);

      //–≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –≤ –ë–î
      login = ctx.session.login;
      chatId = ctx.chat.id;
      const sqlQuery = `INSERT INTO tg_bot (login, chat_id, authorized) 
                        VALUES ('${login}', '${chatId}', 1)
                        ON DUPLICATE KEY UPDATE
                        login = '${login}', chat_id = '${chatId}', authorized = 1;
`;

      //–≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –≤ –ë–î
      try {
        const resultAuth = await new Promise((resolve, reject) => {
          connectionUbilling.query(sqlQuery, (err, result) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          });
        });
      } catch (err) {
        console.error(err);
      }

      ///////////// —Ç—É—Ç —Ç—Ä–µ–±–∞ –Ω–∞–¥–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –≤ –±–æ—Ç /////////////////

      // return ctx.scene.leave();
      return ctx.scene.enter("billingScene");
    } else {
      ctx.reply(
        "‚ùóÔ∏è –ü–∞—Ä–æ–ª—å –Ω–µ–≤—ñ—Ä–Ω–∏–π. \n\n üëá –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ:",
        Markup.inlineKeyboard([Markup.button.callback("üö´ –í—ñ–¥–º—ñ–Ω–∞", "cancel")])
      );
    }
  }
);

module.exports = { authWizard };
