const { Scenes, Markup } = require("telegraf");
const { checkLogin, checkPassword } = require("../controllers/authentification");
const { queryToUbillingBase } = require("../helpers/queryToUbillingBase");

//—Ñ—É–Ω–∫—Ü—ñ—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó —é–∑–µ—Ä–∞ –≤ –ë–î
const setUserAuthInDB = async (login, chatId) => {
  const sqlQuery = `INSERT INTO tg_bot (login, chat_id, authorized) 
                        VALUES ('${login}', '${chatId}', 1)
                        ON DUPLICATE KEY UPDATE
                        login = '${login}', chat_id = '${chatId}', authorized = 1;
`;
  const resultAuth = await queryToUbillingBase(sqlQuery);
};

//step 1. –ó–∞–ø–∏—Ç–∞—î–º–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É
const step_1 = async (ctx) => {
  await ctx.reply(
    "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É",
    Markup.keyboard([Markup.button.contactRequest("–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É")]).resize()
  );
  return ctx.wizard.next();
};

//step 2. –û–±—Ä–æ–±–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∞–±–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∫—Ä–æ–∫ –≤–≤–æ–¥—É –ª–æ–≥—ñ–Ω/–ø–∞—Ä–æ–ª—å
const step_2 = async (ctx) => {
  if (ctx.message && ctx.message.contact) {
    const userPhone = ctx.message.contact.phone_number;
    ctx.reply(`–í–∞—à –Ω–æ–º–µ—Ä: ${userPhone}`);
    //–æ–±—Ä–æ–±–∫–∞ –Ω–æ–º–µ—Ä–∞, –≤–∏–¥–≤–∞–ª—è—î–º–æ +38
    let formattedPhone = "";
    if (userPhone.startsWith("+38")) {
      formattedPhone = userPhone.slice(3);
    } else if (userPhone.startsWith("38")) {
      formattedPhone = userPhone.slice(2);
    } else {
      formattedPhone = userPhone;
    }

    // –†–æ–±–∏–º–æ –∑–∞–ø–∏—Ç –¥–æ –ë–î.
    const sqlUserExists = `SELECT login FROM phones WHERE mobile LIKE '%${formattedPhone}%'`;
    const userExists = await queryToUbillingBase(sqlUserExists);
    //–Ø–∫—â–æ –∞–±–æ–Ω–∞ –∑–Ω–∞–π–¥–µ–Ω–æ
    //–Ø–∫—â–æ —É –∞–±–æ–Ω–µ–Ω—Ç–∞ –¥–µ–∫—ñ–ª—å–∫–∞ –∞–∫–∞—É–Ω—Ç—ñ–≤ —Ç–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–≤–µ—Å—Ç–∏ –≤–µ—Å—å —Å–ø–∏—Å–æ–∫
    //(–ª–æ–≥—ñ–Ω, –∞–¥—Ä–µ—Å–∞) —Ç–∞ —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –≤ —è–∫–æ–º—É –ª–æ–≥—ñ–Ω, –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∞—Ç—å —ñ –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—å
    if (userExists.length !== 0) {
      //–∞–≤—Ç–æ—Ä–∏–∑—É—î–º–æ
      const login = userExists[0].login;
      const chatId = ctx.chat.id;
      ctx.session.login = login;
      ctx.session.isAuth = true;

      //–≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –≤ –ë–î
      setUserAuthInDB(login, chatId);

      //–≤—Ö—ñ–¥ –≤ —Å—Ü–µ–Ω—É –±—ñ–ª—ñ–Ω–≥–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      return ctx.scene.enter("billingScene");
    } else {
      //–Ø–∫—â–æ –∞–±–æ–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–µ—Ä–µ–∫–∏–Ω–µ–º–æ –Ω–∞ —Å—Ü–µ–Ω—É –≤–≤–æ–¥—É –ø–∞—Ä–æ–ª—è
      // return ctx.wizard.next();
      await ctx.reply("–ù–æ–º–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", Markup.removeKeyboard());
      await ctx.reply(
        "üëá –í–≤–µ–¥—ñ—Ç—å –ª–æ–≥—ñ–Ω:",
        Markup.inlineKeyboard([Markup.button.callback("üö´ –í—ñ–¥–º—ñ–Ω–∞", "cancel")])
      );

      return ctx.wizard.next();
    }
  } else {
    ctx.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞.");
    return ctx.wizard.back();
  }
};

//step 3 –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª–æ–≥—ñ–Ω–∞, –≤–≤–µ–¥–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—é
const step_3 = async (ctx) => {
  //—è–∫—â–æ –ø–µ—Ä–µ–¥ —Ü–∏–º –≤–≤–µ–ª–∏ –≤—ñ–¥–º—ñ–Ω–∞ —Ç–æ –∑–∞–≤–µ—Ä—à—É—î–º–æ —Å—Ü–µ–Ω—É
  if (ctx.callbackQuery && ctx.callbackQuery.data === "cancel") {
    ctx.reply("–û–ø–µ—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞");
    return ctx.scene.leave();
  }

  //–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –ª–æ–≥—ñ–Ω–∞
  if ((await checkLogin(ctx.message.text)) === true) {
    //—Å–±–µ—Ä—ñ–≥–∞—î–º–æ –ª–æ–≥—ñ–Ω —É —Å–µ—Å—ñ—é
    ctx.session.login = ctx.message.text;

    ctx.reply(
      `üëá –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à –ø–∞—Ä–æ–ª—å:`,
      Markup.inlineKeyboard([Markup.button.callback("üö´ –í—ñ–¥–º—ñ–Ω–∞", "cancel")])
    );
    return ctx.wizard.next();
  } else {
    ctx.reply(
      "‚ùóÔ∏è –õ–æ–≥—ñ–Ω –Ω–µ–≤—ñ—Ä–Ω–∏–π. \n\n üëá –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ:",
      Markup.inlineKeyboard([Markup.button.callback("üö´ –í—ñ–¥–º—ñ–Ω–∞", "cancel")])
    );
  }
};

//step 4 –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞—Ä–æ–ª—é, –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å–µ—Å—ñ—ó,
//       –Ω–∞–¥–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É –≤ –±–æ—Ç, –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –≤ –ë–î
const step_4 = async (ctx) => {
  //—è–∫—â–æ –ø–µ—Ä–µ–¥ —Ü–∏–º –≤–≤–µ–ª–∏ –≤—ñ–¥–º—ñ–Ω–∞ —Ç–æ –∑–∞–≤–µ—Ä—à—É—î–º–æ —Å—Ü–µ–Ω—É
  if (ctx.callbackQuery && ctx.callbackQuery.data === "cancel") {
    ctx.reply("–û–ø–µ—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞");
    return ctx.scene.leave();
  }

  //–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—ñ –ø–∞—Ä–æ–ª—è
  if ((await checkPassword(ctx.session.login, ctx.message.text)) === true) {
    ctx.reply(`–î—è–∫—É—é! –í–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ.`);

    //–≤—Ç—Å–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –≤ —Å–µ—Å—ñ—ó
    ctx.session.isAuth = true;

    //–≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –≤ –ë–î
    const login = ctx.session.login;
    const chatId = ctx.chat.id;
    const sqlQuery = `INSERT INTO tg_bot (login, chat_id, authorized) 
                        VALUES ('${login}', '${chatId}', 1)
                        ON DUPLICATE KEY UPDATE
                        login = '${login}', chat_id = '${chatId}', authorized = 1;
`;

    //–≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –≤ –ë–î
    const resultAuth = await queryToUbillingBase(sqlQuery);

    //–≤—Ö—ñ–¥ –≤ —Å—Ü–µ–Ω—É –±—ñ–ª—ñ–Ω–≥–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    return ctx.scene.enter("billingScene");
  } else {
    ctx.reply(
      "‚ùóÔ∏è –ü–∞—Ä–æ–ª—å –Ω–µ–≤—ñ—Ä–Ω–∏–π. \n\n üëá –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ:",
      Markup.inlineKeyboard([Markup.button.callback("üö´ –í—ñ–¥–º—ñ–Ω–∞", "cancel")])
    );
  }
};

//–°—Ü–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
const authWizard = new Scenes.WizardScene("authentication", step_1, step_2, step_3, step_4);

module.exports = { authWizard };
